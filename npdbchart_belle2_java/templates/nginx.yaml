apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    upstream java {
        server java.{{ .Values.project }}.svc.cluster.local:8080 max_conns=150;
    }

    upstream java-replica {
        server java.{{ .Values.project }}.svc.cluster.local:8080 weight=80 max_conns=120;
        server java-replica.{{ .Values.project }}.svc.cluster.local:8080 weight=20 max_conns=100;
    }

    log_format main_with_cache  '$remote_addr - $remote_user [$time_local] '
                                '"$request" $status $body_bytes_sent '
                                '"$http_referer" "$http_user_agent" '
                                '$upstream_cache_status';

    access_log /var/log/nginx/access_custom.log main_with_cache;
    error_log /var/log/nginx/error.log debug;

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:50m max_size=500m inactive=1h use_temp_path=off;

    server {

        listen 8080;

        client_max_body_size 100M;

        location /b2s/rest/v2/globalTagStatus {

            proxy_pass http://java;
            proxy_redirect off;

            # REMOVE Cache-Control from backend
            proxy_hide_header Cache-Control;
            # Add Cache-Control header to the response
            add_header Cache-Control {{ .Values.nginx_cache_control_value }};
            add_header X-Cache-Status $upstream_cache_status;

            proxy_cache my_cache;
            proxy_cache_valid 200 302 10h; # Cache successful responses for 60 seconds
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_ignore_headers "Cache-Control" "Expires";

            proxy_read_timeout 1800;
            proxy_connect_timeout 1800;
            proxy_send_timeout 1800;
            send_timeout 1800;
            fastcgi_read_timeout 1800;
        }

        location /b2s/rest/v2/globalTags {

            proxy_pass http://java;
            proxy_redirect off;

            # REMOVE Cache-Control from backend
            proxy_hide_header Cache-Control;
            # Add Cache-Control header to the response
            add_header Cache-Control {{ .Values.nginx_cache_control_value }};
            add_header X-Cache-Status $upstream_cache_status;

            proxy_cache my_cache;
            proxy_cache_valid 200 302 600s; # Cache successful responses for 60 seconds
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_ignore_headers "Cache-Control" "Expires";

            proxy_read_timeout 1800;
            proxy_connect_timeout 1800;
            proxy_send_timeout 1800;
            send_timeout 1800;
            fastcgi_read_timeout 1800;
        }

        location /b2s/rest/v2/iovPayloads {

            proxy_pass http://java-replica;
            #proxy_pass http://java;
            proxy_redirect off;

            # REMOVE Cache-Control from backend
            proxy_hide_header Cache-Control;
            # Add Cache-Control header to the response
            add_header Cache-Control {{ .Values.nginx_cache_control_value }};
            add_header X-Cache-Status $upstream_cache_status;

            proxy_cache my_cache;
            proxy_cache_valid 200 302 300s; # Cache successful responses for 60 seconds
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_ignore_headers "Cache-Control" "Expires";

            proxy_read_timeout 1800;
            proxy_connect_timeout 1800;
            proxy_send_timeout 1800;
            send_timeout 1800;
            fastcgi_read_timeout 1800;
        }

        location / {
            proxy_pass http://java;
            proxy_redirect off;

            # REMOVE Cache-Control from backend
            proxy_hide_header Cache-Control;
            # Add Cache-Control header to the response
            add_header Cache-Control {{ .Values.nginx_cache_control_value }};
            add_header X-Cache-Status $upstream_cache_status;

            proxy_cache my_cache;
            proxy_cache_valid 200 302 60s; # Cache successful responses for 60 seconds
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_ignore_headers "Cache-Control" "Expires";

            proxy_read_timeout 1800;
            proxy_connect_timeout 1800;
            proxy_send_timeout 1800;
            send_timeout 1800;
            fastcgi_read_timeout 1800;
        }

    }
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  lookupPolicy:
    local: true
  tags:
    - name: {{ .Values.nginx_docker_image | splitList ":" | last | quote }}
      from:
        kind: DockerImage
        name: {{ .Values.nginx_docker_image }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: "image-registry.openshift-image-registry.svc:5000/{{ .Values.project }}/nginx:{{ .Values.nginx_docker_image | splitList ":" | last }}"
        imagePullPolicy: IfNotPresent
#      - name: nginx
#        image: nginx:1.14.2
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/conf.d # mount nginx-conf volumn to /etc/nginx/conf.d
          readOnly: true
        - name: log
          mountPath: /var/log/nginx
        - name: cache #to avoid permissions denied error
          mountPath: /var/cache/nginx
        - name: run #to avoid permissions denied error
          mountPath: /var/run
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf # place ConfigMap `nginx-conf` on /etc/nginx/conf.d
          items:
           - key: nginx.conf
             path: nginx.conf
      - name: log
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: run
        emptyDir: {}
---
kind: Service
apiVersion: v1
metadata:
  name: "nginx"
spec:
  selector:
    app: "nginx"
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: nginx
  labels:
    app: nginx
  annotations:
    haproxy.router.openshift.io/disable_cookies: "true"
spec:
  host: {{ .Values.appname }}.apps.{{ .Values.okdcluster }}
  to:
    kind: Service
    name: nginx
  port:
    targetPort: http
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Allow 
